// Time Complexity :O(n)+O(nlogn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:

class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);//sorting
        int n = citations.length;
        for (int i = 0; i < n; i++) {
            int diff = n - i; //fidning diff from n to index
            if (diff <= citations[i]) {
                return diff;
            }
        }
        return 0;

    }
}



// Time Complexity :
// Space Complexity :O(n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach:

class Solution {
    public int hIndex(int[] citations) {
        int n = citations.length;
        int[] buckets = new int[n+1];//array for bucket sorting
        for (int i = 0; i < n; i++) {
            if (citations[i] >= n) {//if the cit of i is greater than or equal to n then simpll incrementing nth index value
                buckets[n]++;
            } else {
                buckets[citations[i]]++;//just incementing index value in buckets array
            }
        }
        int diff = 0;
        for (int i = n ; i >= 0; i--) {
            diff = diff + buckets[i];//calculate the citations count
            if (diff >= i) {
                return i;
            }
        }
        return 0;

    }
}